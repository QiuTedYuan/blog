{"posts":[{"title":"我的游戏回忆录——写在30岁","text":"记忆是可以捏造的，本文中或许存在False Memory。 红白机时代说到人生的第一台游戏机，那自然是打着学习机名号的小霸王了。每次通电的那声“小霸王其乐无穷啊”，配合CRT电视上闪烁的大红色Logo，是专属于80、90后的回忆。抛开对FC的设计抄袭与配套的64 in 1盗版卡带不谈，确实圆了小时候的游戏梦。卡带的黄色塑料外壳做工很差，不耐几次拔插就分崩离析，露出青绿色的芯片。 小霸王官方卡带发行年份：1994 / 开发（？）商：小霸王 / 初体验：不详 / 完成度：不详 作为“学习机”，小霸王自然是有“官方”学习卡带的。如果没记错的话，当年应该就是视频里的《小霸王中英文电脑学习卡V3.0》。其中比较有印象的是按键击落掉下来的字母（帮助熟悉键盘）、完全看不懂的五笔和注音、以及有马里奥、碧姬、路易等出来观望（版权警告）打字的消息板，写着写着还要去蘸墨水。比较出名的中国象棋则是没怎么碰过。找素材的时候发现好像还支持Basic编程，这么说来确实有一点印象，但当年只觉得是一堆乱码，和消息板没什么区别。小时候能拿到游戏卡的场合并不多，借着这张卡“游戏”也是颇有印象。 document.getElementById(\"video1\").style.height=document.getElementById(\"video1\").scrollWidth*0.64+\"px\"; 64 in 1作为经典的盗版卡，现在知道里面其实有很多重复的游戏，但是当年并没有因此失望，毕竟任天堂FC上的游戏一个个拿出来都是精品。如今在Switch Online上能重温大部分。这边就回复一下非常有印象的一小部分吧。 超级玛丽发行年份：1983 / 开发商：任天堂 / 初体验：不详 / 完成度：1周目通关 40多年的热度，无需多言。以当年来说，对1-1所有物品的位置滚瓜烂熟，1-2的加命蘑菇吃法、跳关水管也是基本十有八九成功。但是基于后面难度陡增，能见到火龙关（城堡）的次数是少之又少。加上当年信息闭塞，甚至有在火龙关超时丢命的经历。不过印象里是有通关过，见到2周目的黑夜的。也因为这个游戏养成了许多“老一辈”的游戏习惯，比如跳跃的时候身体会朝跳的方向倾斜。值得一提的是，当年也许由于盗版卡带，1-2有概率变成水下关，直通城堡。一直以为是某种方式触发的秘籍。 长大以后，得知了宫本茂为了压缩卡带的各种巧思，草是不同颜色的云、板栗通过对称来走路等等，实在佩服。另一方面，作为邪道速通的鼻祖游戏，记录也一再被刷新。时至今日，人类速通记录已经被刷新到4分54秒631，与TAS的4分54秒032仅有毫秒级的差异。甚至连盲打记录（小时候的梦想）都被刷到了5分出头。如果只有一部游戏能被记入史册，那么非它莫属了。虽然之后玩过各种各样的马里奥，但是回到初代，比冰面还滑的地板，非线性加速的起跑，极少的补命机会，一次丢两层状态，即使是放在现在的标准，通关难度依旧高得离谱。也怪不得当年光是这个就能玩很久了。 document.getElementById(\"video2\").style.height=document.getElementById(\"video2\").scrollWidth*0.64+\"px\"; 坦克大战发行年份：1985 / 开发商：南梦宫 / 初体验：不详 / 完成度：通关（于GBC） 4种敌人：小车、快车、尖嘴、铁皮，5种地形：砖、铁、水、冰、草，6种道具：加命、升级（x3）、炸场、时停、护盾、保家，简单的胜败条件，却通过地图设计，创造出了50关之多。尤其是开放地图编辑器，更是非常有趣。长大再玩会算提前量了，基本所有图都能堵出生点，反倒没那种战场厮杀的感觉了。 听说双人游玩中A到队友可以硬控N秒，不知真假，或者又是盗版卡带的原因。 猫抓老鼠发行年份：1983 / 开发商：南梦宫 / 初体验：不详 / 完成度：不详 这游戏其实叫Mappy，是那只警察老鼠的名字。不过游戏里再怎么看都是正义猫猫逮捕小偷老鼠吧。弹簧无敌，开门杀敌，彩色门声波攻击，天花板可以走，基本是能记得的所有东西了。 马戏团发行年份：1986 / 开发商：科乐美 / 初体验：不详 / 完成度：不详 这竟然是我玩的第一个科乐美游戏。跳火圈、跳猴子、滚球印象都很深刻。最近好像还出了一个搞笑版，人抬着狮子过火圈。 魂斗罗三目童子魔界村摩托车","link":"/blog/2024/05/23/game/"},{"title":"如何用Hexo搭建个人Blog","text":"Hexo是一个非常好用的博客框架。提供将Markdown渲染成Html博客的功能，并具备丰富的主题。本文简单整理部署Hexo博客流程，以供参考。 使用Github PagesGithub账号的申请不赘述了。开启Github Pages，只需要新建一个以&lt;username&gt;.github.io为名的repository，private亦可。 之后，在Settings中找到Github Pages的选项： 打开对应开关并选择主题即可。 注意：空的Repo不存在master branch，无法开启Github Pages，至少需要加入一个文件（如README.md）。 &lt;username&gt;.github.io 已被占用如果默认的链接已经存在个人主页了，可以另起一个任意名称的Repo（这里以test为例）。 此时Pages则会自动被放到&lt;username&gt;.github.io/test/域名下。 选择主题后，可以很快捷地生成一个pages页面。 Remarks 可以在test &gt; environment中查看编译情况。确定最新的commit已经编译完成后，若浏览器没有刷新，需要清理缓存，或者换用非常用浏览器查看。 &lt;username&gt;.github.io的页面只能编译master branch，其他页面也可编译master下的/docs目录。但是多branch是不支持的。推荐Enforce HTTPS。 使用Hexo安装Git Bash从官网下载Git Bash。 12$ git --versiongit version 2.45.1.windows.1 顺便设置Git 123$ git config --global user.name &lt;YourName&gt;$ git config --global user.email &lt;YourEmail&gt;$ git config --global user.password &lt;YourPassword&gt; 安装Node.js从官网下载Node.js。 12345$ node -vv20.13.1$ npm -v10.5.2 安装Hexo123456789101112131415161718192021222324252627282930$ npm install -g hexo-cli$ hexo -vhexo: 7.2.0hexo-cli: 4.3.2os: win32 10.0.22631 undefinednode: 20.13.1acorn: 8.11.3ada: 2.7.8ares: 1.28.1base64: 0.5.2brotli: 1.1.0cjs_module_lexer: 1.2.2cldr: 45.0icu: 75.1llhttp: 8.1.2modules: 115napi: 9nghttp2: 1.61.0nghttp3: 0.7.0ngtcp2: 1.1.0openssl: 3.0.13+quicsimdutf: 5.2.4tz: 2024aundici: 6.13.0unicode: 15.1uv: 1.46.0uvwasi: 0.0.20v8: 11.3.244.8-node.20zlib: 1.3.0.1-motley-7d77fb7 初始化工作目录注意，目录必须为空，否则会报错。 1234$ mkdir blog$ cd blog$ hexo init$ npm install 目录结构如下 12345678910```bash.├── _config.yml // 全局设置├── package.json // npm依赖包├── public // 部署的网页├── scaffolds // 新建模板├── source // 编译public的源文件| ├── _drafts| └── _posts└── themes 预览网页可以执行以下指令 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 作用分别是清除缓存（clean）、由md生成html文件（generate），以及部署到本地4000端口（server）。在浏览器中键入localhost:4000以预览网页。 至此，本地Hexo的部署基本完成。按Ctrl+C以可以关闭部署。 Remark： 如果4000端口被占用，部署时用hexo s -p 5000指定空闲的端口。 如果只修改md文件，只执行hexo g重新生成Html即可。 修改主题本次使用主题为Icarus。具体按照文档安装即可。 12$ npm install hexo-theme-icarus$ hexo config theme icarus 该主题的配置文件主要在./_config.yml与./_config.icarus.yml中。 部署到Github上首先确认安装npm install hexo-deployer-git，之后修改./_config.yml中 1234deploy: type: git repository: https://github.com/&lt;user&gt;/&lt;repo&gt; branch: master 最后执行 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 可以在github网页上看到效果。 备份源文件建议将md源文件与网页分开部署，例如使用不同的分支或不同的repo，否则源文件可能丢失。 1234567$ cd blog$ git init$ git add source$ git add _config.*$ git commit -m &quot;initial commit&quot;$ git remote add origin https://&lt;YourName&gt;@github.com/&lt;YourName&gt;/&lt;Repo&gt;$ git push -u origin master 撰写文章基本命令是hexo new [post/page/draft] &quot;&lt;title&gt;&quot;，在config中默认了default_layout: post，因此也可以hexo new &quot;&lt;title&gt;&quot;来新建一篇文章。 执行后，会在./source/_posts目录中新建一个&lt;title&gt;文件夹与&lt;title&gt;.md文件。默认的格式来源于./scaffolds/post.md。文件头一般是 12345678910---title: date: toc: truetags: - TAGcategories: - [1ST, 2ND]relative_link: true--- 文章书写依照Markdown语法。要依照相对路径引用对应目录的图片比较复杂，需要开启relative_link，并通过如下方式。 1{% asset_img img_name &quot;NAME&quot; %}","link":"/blog/2019/06/01/hexo/"},{"title":"颜色搭配","text":"个人对于丰富的色彩比较执着。本文稍微总结一下比较喜欢的色彩，以供画图等需求。 MTR路线地铁路线经常有交叉的情况，因此也许比较适合用来画图。 荃湾线 #FF0000 观塘线 #1A9431 港岛线 #0860A8 南港岛线 #B5BD00 将军澳线 #6B208B 东涌线 #FE7F1D 迪士尼线 #F550A6 机场快线 #1C7670 东铁线 #53B7E8 屯马线 #9A3B26 Nintendo Switch(JoyCon)[https://en.wikipedia.org/wiki/Joy-Con]的色彩适合用于非标准的红黄蓝。 淡雅粉 #F8B1BF 电光粉 #FF3278 电光红 #FF3C28 红 #E10F00 电光橙 #FAA005 淡雅黄 #E3E790 电光黄 #E6FF00 淡雅绿 #C8EEC9 电光绿 #1EDC00 电光蓝 #0AB9E6 蓝 #4655F5 淡雅紫 #DDC1EA 电光紫 #B400E6 灰 #828282","link":"/blog/2019/12/09/color/"},{"title":"搭建工作环境","text":"本文是对新电脑安装软件的简单汇总。以Windows为主。 基础环境 Chrome Adobe Reader Git Bash Sublime Text 7-Zip Windows相关Cygwin和Msys2都比较常用，暂时没能体会出区别。轻量开发不需要。此外还有Windows Subsystem for Linux (WSL)，但经常容易出现同一台机器上两个版本的软件这种问题，比较麻烦。Windows Terminal可以集成多种环境，但是没有什么特别的需求。 以Msys2为例，安装完后执行pacman -Syu来更新包，可能需要执行两次。此外，要对系统变量做如下设置： 增加用户变量MSYS2_PATH_TYPE，值为inherit，否则不会继承系统的PATH。 将msys64\\usr\\bin和msys54\\usr\\local\\bin加入系统PATH。 编程环境C++ / Java 开发 IntelliJ IDEA IntelliJ Clion PythonWindows+Python是一个众所周知的灾难。方便起见还是直接使用Anaconda吧！分别对应了Python2和3的版本。安装时记得勾选加入PATH中。首先执行 1conda update conda 进行更新，接下来在Anaconda的目录中分别将python.exe复制到同目录下python2.exe及python3.exe方便调用不同版本。具体python指向哪一个是根据PATH中的先后顺序，可以用where python来查看。同理复制Scripts文件夹中的pip.exe及pip-script.py。调用python会给WARNING说没有激活conda环境，方法是先conda init &lt;powershell&gt;更改为当前shell，重启shell后用conda info --envs找到地址，接着conda activate base就可以了。 或许需要用set-ExecutionPolicy RemoteSigned来提供权限。 推荐安装black来进行Code Formatting。需要用Python3来安装 1python3 -m pip install black 但是装完后black命令也可以用在Python2文件上。 Emacs最好的编辑器（操作系统）Emacs，目前Windows最新版26.3。下载并解压后，根据官方的提示执行bin\\runemacs.exe即可。运行bin\\emacs.exe也可以，只是会多出一个黑框。 在命令行下直接运行bin\\emacs.exe不会多一个命令行窗口。同时支持-nw选项。 将&lt;folder&gt;\\emacs\\bin文件夹加入PATH中，方便直接调用。 在PowerShell或Windows Terminal中查看PATH需要用$env:PATH 首先要找到Emacs加载配置的地址。用echo ~来确认。通常在c:/Users/&lt;usrname&gt;/AppData/Roaming/中。 1cd ~/.emacs.d/ 直接引用可以直接用别人现成的配置。已有的配置推荐这几个。 Spacemacs一个开源项目，重点是Emacs与Vim的兼容。首次启动会询问用户更倾向于哪种编辑器方式，以及需要轻量或重量的编辑器。安装方式直接 1git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d 注意备份好自己原先的配置文件。首次安装比较缓慢，后面的效率还是不错的。此外，作者还推出了一个21天Emacs学习指南，解释的还是比较清楚的。后半部分和Vim关系比较大。 高手配置Steve Purcell的配置在Github上Star最多(5.3k Stars)，应该是业界翘楚了。 1git clone https://github.com/purcell/emacs.d.git ~/.emacs.d 但是在我的电脑上每次打开要加载18秒，太慢了。。。 自己配置白盒用起来还是更舒服，至少要知道每一块的作用是什么。比较推荐的Reference有：Emacs-China 社区, Emacs-TW 社区, 以及一篇Python社区的文章。 首先建立.emacs.d/init.el文件。这是emacs读取配置的入口。规范起见，所有的.el文件开头结尾应该遵循如下规范： 1234567;;; package --- summary;;; .emacs.d/init.el;;; Commentary:;;; Code:(provide `init);;; init.el ends here 同时，为了能在配置时快速找到这个文件，暂时将它绑定到&lt;F2&gt;。 12345;; Fast open init file, bind to &lt;F2&gt;(defun open-init-file() (interactive) (find-file &quot;~/.emacs.d/init.el&quot;))(global-set-key (kbd &quot;&lt;f2&gt;&quot;) 'open-init-file) 文件管理为了有效管理不同文件，建立一个lisp文件夹以管理不同的el文件。同时在init.el中加入 1(add-to-list 'load-path &quot;~/.emacs.d/lisp/&quot;) 这样后面就可以用(require)命令来直接引用(provide)的文件了。此外可以通过org来管理，步骤略。 依赖项最新版本已经集成packages.el，直接引用即可。安装并配置use-package，方便其他包的安装。使用auto-compile确保编译包，并使用最新版本。 12345678910111213141516171819202122232425262728293031;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; MELPA package support;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++(require 'package)(setq package-archives '((&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;) (&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) (&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) (&quot;elpy&quot; . &quot;http://jorgenschaefer.github.io/packages/&quot;) (&quot;gnu&quot; . &quot;http://elpa.gnu.org/packages/&quot;)) ;; Avoid duplicate loading package-enable-at-startup nil);; Initializes the package infrastructure(package-initialize);; install use-package(when (not (package-installed-p 'use-package)) (package-refresh-contents) (package-install 'use-package));; Configure use-package(eval-when-compile (require 'use-package))(setq use-package-verbose t)(setq use-package-always-ensure t);; always compile packages(use-package auto-compile :config (auto-compile-on-load-mode));; use latest version(setq load-prefer-newer t) 重新启动Emacs并等待初始化。接下来定义my-packages变量， 后面需要什么包的话都加在里面统一管理。 12345678910111213141516(defvar my-packages '(better-defaults ;; Set up some better Emacs defaults material-theme ;; Theme monokai-theme ;; Current Theme company ;; Auto complete web-mode ;; .html js2-mode ;; .js elpy ;; python ));; Scans the list in my-packages;; If the package listed is not already installed, install it(mapc #'(lambda (package) (unless (package-installed-p package) (package-install package))) my-packages) UI配置更改UI使得界面更加清楚美观。 设定编码1234567;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; setup coding system;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++(prefer-coding-system 'utf-8)(setenv &quot;LANG&quot; &quot;en_US.UTF-8&quot;)(setenv &quot;LC_ALL&quot; &quot;en_US.UTF-8&quot;)(setenv &quot;LC_CTYPE&quot; &quot;en_US.UTF-8&quot;) 去掉工具栏、菜单、滚动条， 以及minibuffer的滚动条。可以把指针改成竖线，但我习惯方块。12345678;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; Basic Settings;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; (setq-default cursor-type 'bar)(tool-bar-mode -1)(menu-bar-mode -1)(scroll-bar-mode -1)(set-window-scroll-bars (minibuffer-window) nil nil) 打开时最大化，并取消欢迎界面及scratch上的信息。123(setq inhibit-splash-screen 1 initial-scratch-message nil initial-frame-alist `((fullscreen . maximized))) Tmux个人感觉(Tmux)[https://github.com/tmux/tmux/wiki]是一个简装Emacs，但是提供了多窗口和独立于ssh session的功能，非常实用。","link":"/blog/2020/01/29/env/"}],"tags":[{"name":"生活","slug":"生活","link":"/blog/tags/%E7%94%9F%E6%B4%BB/"},{"name":"工具","slug":"工具","link":"/blog/tags/%E5%B7%A5%E5%85%B7/"}],"categories":[{"name":"生活","slug":"生活","link":"/blog/categories/%E7%94%9F%E6%B4%BB/"},{"name":"工具","slug":"工具","link":"/blog/categories/%E5%B7%A5%E5%85%B7/"},{"name":"游戏","slug":"生活/游戏","link":"/blog/categories/%E7%94%9F%E6%B4%BB/%E6%B8%B8%E6%88%8F/"},{"name":"Blog","slug":"工具/Blog","link":"/blog/categories/%E5%B7%A5%E5%85%B7/Blog/"},{"name":"画图","slug":"工具/画图","link":"/blog/categories/%E5%B7%A5%E5%85%B7/%E7%94%BB%E5%9B%BE/"},{"name":"环境","slug":"工具/环境","link":"/blog/categories/%E5%B7%A5%E5%85%B7/%E7%8E%AF%E5%A2%83/"}],"pages":[]}