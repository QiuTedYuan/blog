{"posts":[{"title":"如何用Hexo搭建个人Blog","text":"Hexo是一个非常好用的博客框架。提供将Markdown渲染成Html博客的功能，并具备丰富的主题。本文简单整理部署Hexo博客流程，以供参考。 使用Github PagesGithub账号的申请不赘述了。开启Github Pages，只需要新建一个以&lt;username&gt;.github.io为名的repository，private亦可。 之后，在Settings中找到Github Pages的选项： 打开对应开关并选择主题即可。 注意：空的Repo不存在master branch，无法开启Github Pages，至少需要加入一个文件（如README.md）。 &lt;username&gt;.github.io 已被占用如果默认的链接已经存在个人主页了，可以另起一个任意名称的Repo（这里以test为例）。 此时Pages则会自动被放到&lt;username&gt;.github.io/test/域名下。 选择主题后，可以很快捷地生成一个pages页面。 Remarks 可以在test &gt; environment中查看编译情况。确定最新的commit已经编译完成后，若浏览器没有刷新，需要清理缓存，或者换用非常用浏览器查看。 &lt;username&gt;.github.io的页面只能编译master branch，其他页面也可编译master下的/docs目录。但是多branch是不支持的。推荐Enforce HTTPS。 使用Hexo安装Git Bash从官网下载Git Bash。 12$ git --versiongit version 2.45.1.windows.1 安装Node.js从官网下载Node.js。 12345$ node -vv20.13.1$ npm -v10.5.2 安装Hexo123456789101112131415161718192021222324252627282930$ npm install -g hexo-cli$ hexo -vhexo: 7.2.0hexo-cli: 4.3.2os: win32 10.0.22631 undefinednode: 20.13.1acorn: 8.11.3ada: 2.7.8ares: 1.28.1base64: 0.5.2brotli: 1.1.0cjs_module_lexer: 1.2.2cldr: 45.0icu: 75.1llhttp: 8.1.2modules: 115napi: 9nghttp2: 1.61.0nghttp3: 0.7.0ngtcp2: 1.1.0openssl: 3.0.13+quicsimdutf: 5.2.4tz: 2024aundici: 6.13.0unicode: 15.1uv: 1.46.0uvwasi: 0.0.20v8: 11.3.244.8-node.20zlib: 1.3.0.1-motley-7d77fb7 初始化工作目录注意，目录必须为空，否则会报错。 1234$ mkdir blog$ cd blog$ hexo init$ npm install 123$ ls_config.yml package.json scaffolds/ themes/node_modules/ package-lock.json source/ 预览网页可以执行以下指令 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 作用分别是清除缓存（clean）、由md生成html文件（generate），以及部署到本地4000端口（server）。在浏览器中键入localhost:4000以预览网页。 至此，本地Hexo的部署基本完成。按Ctrl+C以可以关闭部署。 Remark： 如果4000端口被占用，部署时用hexo s -p 5000指定空闲的端口。 如果只修改md文件，只执行hexo g重新生成Html即可。 修改主题这里使用Bean Tech主题，先从Github上clone到本地。 123456789$ git clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantechCloning into './hexo-beantech'...remote: Enumerating objects: 207, done.remote: Total 207 (delta 0), reused 0 (delta 0), pack-reused 207Receiving objects: 100% (207/207), 13.18 MiB | 1.31 MiB/s, done.Resolving deltas: 100% (64/64), done.$ ls hexo-beantech/_config.yml LICENSE package.json README.md scaffolds/ source/ themes/ 这个主题需要覆盖原文件，执行cp -r hexo-beantech/. ./。再次执行npm install。现在可以再用hexo clean &amp;&amp; hexo g &amp;&amp; hexo s看一下效果。 Remark:安装主题后Hexo警告DeprecationWarning: fs.SyncWriteStream is deprecated.根据网上的方案，分别执行以下命令升级解决。 1234npm install hexo-fs --savenpm install hexo-deployer-git@0.3.1 --savenpm install hexo-renderer-ejs@0.3.1 --savenpm install hexo-server@0.2.2 --save 个人配置目录结构12345678910111213.├── _config.yml // 全局设置├── package.json // npm依赖包├── public // 部署的网页├── scaffolds // 新建模板├── source // 编译public的源文件| ├── _drafts| └── _posts└── themes └── beantech ├── _config.yml // 代码高亮设置 ├── sources └── layout // html配置 Config文件配置删除./source/CNAME，否则Github编译报错。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Your Name // 标题，出现在左上角及首页居中subtitle: Personal Blog // 副标题，出现在标题下方author: Your Name // 作者，每一条Post署名及底部版权language: en_US // 语言，见.themes/beantech/languages_to_be_addedtimezone: Hongkong // 时区# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://&lt;username&gt;.github.io/test // 远程地址，这里以子目录为例root: /test/ // 在子目录的话需要修改permalink: :year/:month/:day/:title/permalink_defaults:#Custom Setting Start# Site settingsSEOTitle: Your Name // 出现在标签栏email: &lt;username&gt;@gmail.com // 邮箱，不确定出现在哪里description: &quot;&quot;keyword: &quot;&quot;header-img: img/header_img/xxx.png // 主页背景，对应地址./source/img/header_img/...signature: truesignature-img: img/signature/xxx.png // 签名，对应地址./source/img/signature/...# SNS settings // 填写对应信息即可# RSS: false# weibo_username: &lt;username&gt;# zhihu_username: &lt;username&gt;github_username: &lt;username&gt;# twitter_username: &lt;username&gt;facebook_username: &lt;username&gt;linkedin_username: &lt;username&gt;# Build settingsanchorjs: true# Disqus settings // 禁用Disqus评论# disqus_username: your-disqus-ID# Duoshuo settings# duoshuo_username: kaijun# Share component is depend on Comment so we can NOT use share only.# duoshuo_share: true // duoshuo评论也关掉# Analytics settings# Baidu Analytics# ba_track_id: 4cc1f2d8f3067386cc5cdb626a202900# Google Analytics# ga_track_id: 'UA-XXXXXXXX-X' // 不知道怎么用，因此omment掉了# ga_domain: yoursite# Sidebar settingssidebar: truesidebar-about-description: &quot;Hi&quot; // 简介，出现在右侧个人照片下方sidebar-avatar: img/xxx.png // 头像，对应地址./source/img/...widgets: // 边栏导航，我去掉了friends加入了archive- featured-tags- short-about- recent-posts# - friends-blog- archive# - category // category目前没有实现# widget behavior## Archivearchive_type: 'monthly'show_count: true## Featured Tagsfeatured-tags: truefeatured-condition-size: 1 // 至少有2篇文章的tag会出现在feature中## Friends // 全部comment掉，否则出现在post下方# friends: [# {# title: &quot;Bean Tech&quot;,# href: &quot;http://beantech.org&quot;# },{# title: &quot;Kaijun's Blog&quot;,# href: &quot;http://blog.kaijun.rocks&quot;# },{# title: &quot;Hux Blog&quot;,# href: &quot;http://huangxuan.me&quot;# },{# title: &quot;It Helps SEO&quot;,# href: &quot;#&quot;# }# ]#Custom Setting End# Directory // 对应文件夹地址，不需要修改source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing // 默认新文件配置，不需要修改new_post_name: :title.mddefault_layout: posttitlecase: falseexternal_link: truefilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:home_posts_tag: true // 是否在首页显示Tag# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: archivesarchive_generator: per_page: 10 yearly: true monthly: true daily: false# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’'# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: beantech#sitemapsitemap: path: sitemap.xml# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://&lt;repo&gt;.git // 改成自己的Repository branch:master // 只能编译master branch 上述修改完成后，再次hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，打开localhost:4000会自动跳转到localhost:4000/test。 其他配置签名制作Windows画图无法保存透明通道。使用画图3D画出来后，复制到ppt中，点选格式&gt;颜色&gt;设置透明色并点击背景，即可将背景设置为透明。（如果想做白色签名，就用黑色背景）。完成后右键另存为图片，就保存了透明通道。 页面背景主页的在_config.yml中已经配置过了。另外需要手动配置的页面是./source/about/index.md，./source/archive/index.md，./source/tags/index.md，./source/404.md。对应的图片放在./source/img/header_img/...。其中description不想要的话不能留空，这样会套用全局设置（跟首页相同）。要打一个空格&quot; &quot;。 文章模板在./scaffolds/下，可以设置page和post的默认背景。catalog是目录的开关。 标签栏图标位于./themes/beantech/layout/_partial/head.ejs第8行，对应图片存在./source/img/...。 To Top 图标在./themes/beantech/source/css/rocket.styl中有两个地方用到该图标，改为自己喜欢的即可，放在./themes/beantech/source/css/images/... 文中标题标记原来是一个B，感觉比较丑。在./themes/beantech/layout/post.ejs的174行，我换成了&gt;。 代码高亮在./themes/beantech/_config.yml，我换成了night eighties。\\ 修复 BugArchive布局Archive页面的布局不是很好，长的标题会越界。我的做法是把 ./themes/beantech/layout/archive.ejs顶部的layout由page改为了layout，去掉sidebar。 目录问题目录指向#undefined的bug是已知issue。目前的解决方法是./node_modules/hexo-toc/lib/filter.js中，恢复第28行，comment第29-31行。但是会被npm install覆盖，仍然open。 js文件找不到totop.js，toc.js，以及icon-wechat.png找不到，是因为目录位置更改了。我的解决方法是在./themes/beantech/layout/layout.ejs中，comment掉icon-wechat.png的那一块，将另外两个js重定位如下。 12&lt;script type=&quot;text/javascript&quot; src=&quot;/test/js/totop.js?v=1.0.0&quot; async=&quot;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/test/js/toc.js?v=1.0.0&quot; async=&quot;&quot;&gt;&lt;/script&gt; 新建Page报错执行hexo new page test，然后hexo clean &amp;&amp; hexo g，报错 1234567891011121314151617181920212223242526272829ERROR D:\\Documents\\test\\themes\\beantech\\layout\\page.ejs:56 54| &quot;&gt; 55| &gt;&gt; 56| &lt;%- page.content || body %&gt; 57| 58| &lt;!-- 如果开启评论功能 --&gt; 59| &lt;% if(page.comments) { %&gt;body is not definedReferenceError: D:\\Documents\\test\\themes\\beantech\\layout\\page.ejs:56 54| &quot;&gt; 55| &gt;&gt; 56| &lt;%- page.content || body %&gt; 57| 58| &lt;!-- 如果开启评论功能 --&gt; 59| &lt;% if(page.comments) { %&gt;body is not defined at eval (eval at compile (D:\\Documents\\test\\node_modules\\ejs\\lib\\ejs.js:464:12), &lt;anonymous&gt;:69:32) at returnedFn (D:\\Documents\\test\\node_modules\\ejs\\lib\\ejs.js:493:17) at Theme._View.View._compiled.locals [as _compiled] (D:\\Documents\\test\\node_modules\\hexo\\lib\\theme\\view.js:125:48) at Theme._View.View.View.render (D:\\Documents\\test\\node_modules\\hexo\\lib\\theme\\view.js:30:15) at route.set (D:\\Documents\\test\\node_modules\\hexo\\lib\\hexo\\index.js:394:29) at tryCatcher (D:\\Documents\\test\\node_modules\\bluebird\\js\\release\\util.js:16:23) at D:\\Documents\\test\\node_modules\\bluebird\\js\\release\\method.js:15:34 at RouteStream._read (D:\\Documents\\test\\node_modules\\hexo\\lib\\hexo\\router.js:134:3) at RouteStream.Readable.read (_stream_readable.js:454:10) at resume_ (_stream_readable.js:834:12) at process._tickCallback (internal/process/next_tick.js:178:19) 此issue在其他主题中存在，解决方法: 将page.ejs重命名为m_page.ejs 将index.ejs的layout替换为m_page 新建page.ejs，内容为12345---layout: m_page---&lt;%- page.content %&gt; 所有命令如下:1234cd ./themes/beantech/layout/mv page.ejs m_page.ejssed -i=&quot;&quot; '2s/^.*/layout: m_page/' index.ejsecho -e &quot;---\\nlayout: m_page\\n---\\n&lt;%- page.content %&gt;&quot; &gt; page.ejs 无法获得Post时间（未能复现）遇到过一个Bug 1TypeError: (name || &quot;&quot;).toLowerCase is not a function 但是似乎高版本修复了，未能复现。可以参见issue。是由于没有设置时区引起的。时区的写法参见Wiki。 导航栏顺序不固定是由于./themes/beantech/layout/_partial/nav.ejs中site.pages没有排序导致的。找到原本的代码 1&lt;% site.pages.forEach(function(page){ %&gt; 修改为 1&lt;% site.pages.data.sort(function(a, b) {return a.title &gt; b.title}).forEach(function(page){ %&gt; 可以修复为按字母表排序。原来已经单独处理了Home保证在第一个。此外，我希望左上角导航到原本的个人主页，因此将同一文件的第12行改为了 1&lt;a class=&quot;navbar-brand&quot; href=&quot;&lt;%= config.root %&gt;../index.html&quot;&gt;Homepage&lt;/a&gt; 已知缺陷Contents为none会有滚动条正常使用没有影响，不需要contents关掉就可以了。 主页摘要不支持&lt;!--more--&gt;是一个open issue，想改字数的话可以在themes/beantech/layout/index.ejs的17行。 部署到Github上1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d Remark:依赖npm install hexo-deployer-git --save，之前已经装过了。 然后访问&lt;username&gt;.github.io/test/就可以看到了。 新建文章基本命令是hexo new [post/page/draft] &quot;&lt;title&gt;&quot;，在config中默认了default_layout: post，因此也可以hexo new &quot;&lt;title&gt;&quot;来新建一篇文章。 Post执行后，会在./source/_posts目录中新建一个&lt;title&gt;文件夹与&lt;title&gt;.md文件。默认的格式来源于./scaffolds/post.md。添加tags的方式为 12345678---...tags:- Hexo- Blogcategory:- Hexo--- 文章书写依照Markdown语法，略。对于图片的引用直接放在同名文件夹下，没有前置地址。 Page新建Page类似于about/tags/archive等，会直接生成./source/&lt;title&gt;/&lt;index.md&gt;，套用的是./scaffolds/page.md。通常而言是不会用到的。 Draft一般用不到，新生成的draft不会显示，需要hexo publish [layout] &lt;title&gt;发布到_posts内，或者hexo g --draft/hexo s --draft预览。 后记搭建网站的过程中还是新学了很多东西，比如ejs、md语法，html的调试等。目前还没有使用版本控制，后面应该会用git管理一下，需要删除本地.git文件夹，新建一个项目。但是由于部署方式也是git，会有比较麻烦的覆盖问题。网上给出的解决方法是直接拷贝。此外，还存在问题的点包括： 图片的管理方式（目前全在Github上，也许会超空间）。 未测试数学公式的使用。 留言系统的开放。应该会弃坑一段时间，目前的功能已经足够我日常使用了。有问题或建议欢迎email我。 依赖Git、Node.js、二者都可通过官网直接安装。 12345678$ git --versiongit version 2.45.1.windows.1$ node -vv20.13.1$ npm -v10.5.2 安装Hexo123$ npm install -g hexo-cli$ hexo -vhexo: 7.2.0 初次使用需要注意目录为空，否则报错。 1234mkdir blogcd bloghexo initnpm install 具体目录结构如下 123456789.├── _config.yml // 全局设置├── package.json // npm依赖包├── public // 部署的网页├── scaffolds // 新建模板├── source // 编译public的源文件| ├── _drafts| └── _posts└── themes 新建文章1$ hexo new &quot;&lt;title&gt;&quot; 会在source/目录下对应创建&lt;title&gt;文件夹与&lt;title&gt;.md文件，默认为post格式。也可以使用hexo new draft &quot;&lt;title&gt;&quot;来生成草稿，这样默认不会发布。直到hexo publish &lt;title&gt;发布或hexo g --draft预览。","link":"/blog/2019/06/01/hexo/"},{"title":"搭建工作环境","text":"工作中经常要换电脑，每次换完会发现这也没有那也没有。把常用环境总结在这里以便日后查询。 基础环境 PDF阅读: Adobe Reader 通用IDE: IntelliJ IDEA 解压：7-Zip Command Line: Git Bash或Cygwin / Msys2。第一个比较轻量级，后面两个暂时没能体会出区别，以Msys2为例吧。此外还有Windows Subsystem for Linux (WSL)，但经常容易出现同一台机器上两个版本的软件这种问题，比较麻烦。Windows Terminal可以集成多种环境，但是没有什么特别的需求。 安装完Msys2后执行pacman -Syu来更新包，可能需要执行两次。此外，要对系统变量做如下设置： 增加用户变量MSYS2_PATH_TYPE，值为inherit，否则不会继承系统的PATH。 将msys64\\usr\\bin和msys54\\usr\\local\\bin加入系统PATH。 编程环境PythonWindows+Python是一个众所周知的灾难。方便起见还是直接使用Anaconda吧！分别对应了Python2和3的版本。安装时记得勾选加入PATH中。首先执行 1conda update conda 进行更新，接下来在Anaconda的目录中分别将python.exe复制到同目录下python2.exe及python3.exe方便调用不同版本。具体python指向哪一个是根据PATH中的先后顺序，可以用where python来查看。同理复制Scripts文件夹中的pip.exe及pip-script.py。调用python会给WARNING说没有激活conda环境，方法是先conda init &lt;powershell&gt;更改为当前shell，重启shell后用conda info --envs找到地址，接着conda activate base就可以了。 或许需要用set-ExecutionPolicy RemoteSigned来提供权限。 推荐安装black来进行Code Formatting。需要用Python3来安装 1python3 -m pip install black 但是装完后black命令也可以用在Python2文件上。 Emacs配置最好的编辑器（操作系统）Emacs，目前Windows最新版26.3。下载并解压后，根据官方的提示执行bin\\runemacs.exe即可。运行bin\\emacs.exe也可以，只是会多出一个黑框。 在命令行下直接运行bin\\emacs.exe不会多一个命令行窗口。同时支持-nw选项。 将&lt;folder&gt;\\emacs\\bin文件夹加入PATH中，方便直接调用。 在PowerShell或Windows Terminal中查看PATH需要用$env:PATH 首先要找到Emacs加载配置的地址。用echo ~来确认。通常在c:/Users/&lt;usrname&gt;/AppData/Roaming/中。 1cd ~/.emacs.d/ 直接引用可以直接用别人现成的配置。已有的配置推荐这几个。 Spacemacs一个开源项目，重点是Emacs与Vim的兼容。首次启动会询问用户更倾向于哪种编辑器方式，以及需要轻量或重量的编辑器。安装方式直接 1git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d 注意备份好自己原先的配置文件。首次安装比较缓慢，后面的效率还是不错的。此外，作者还推出了一个21天Emacs学习指南，解释的还是比较清楚的。后半部分和Vim关系比较大。 高手配置Steve Purcell的配置在Github上Star最多(5.3k Stars)，应该是业界翘楚了。 1git clone https://github.com/purcell/emacs.d.git ~/.emacs.d 但是在我的电脑上每次打开要加载18秒，太慢了。。。 自己配置白盒用起来还是更舒服，至少要知道每一块的作用是什么。比较推荐的Reference有：Emacs-China 社区, Emacs-TW 社区, 以及一篇Python社区的文章。 首先建立.emacs.d/init.el文件。这是emacs读取配置的入口。规范起见，所有的.el文件开头结尾应该遵循如下规范： 1234567;;; package --- summary;;; .emacs.d/init.el;;; Commentary:;;; Code:(provide `init);;; init.el ends here 同时，为了能在配置时快速找到这个文件，暂时将它绑定到&lt;F2&gt;。 12345;; Fast open init file, bind to &lt;F2&gt;(defun open-init-file() (interactive) (find-file &quot;~/.emacs.d/init.el&quot;))(global-set-key (kbd &quot;&lt;f2&gt;&quot;) 'open-init-file) 文件管理为了有效管理不同文件，建立一个lisp文件夹以管理不同的el文件。同时在init.el中加入 1(add-to-list 'load-path &quot;~/.emacs.d/lisp/&quot;) 这样后面就可以用(require)命令来直接引用(provide)的文件了。此外可以通过org来管理，步骤略。 依赖项最新版本已经集成packages.el，直接引用即可。安装并配置use-package，方便其他包的安装。使用auto-compile确保编译包，并使用最新版本。 12345678910111213141516171819202122232425262728293031;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; MELPA package support;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++(require 'package)(setq package-archives '((&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;) (&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) (&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) (&quot;elpy&quot; . &quot;http://jorgenschaefer.github.io/packages/&quot;) (&quot;gnu&quot; . &quot;http://elpa.gnu.org/packages/&quot;)) ;; Avoid duplicate loading package-enable-at-startup nil);; Initializes the package infrastructure(package-initialize);; install use-package(when (not (package-installed-p 'use-package)) (package-refresh-contents) (package-install 'use-package));; Configure use-package(eval-when-compile (require 'use-package))(setq use-package-verbose t)(setq use-package-always-ensure t);; always compile packages(use-package auto-compile :config (auto-compile-on-load-mode));; use latest version(setq load-prefer-newer t) 重新启动Emacs并等待初始化。接下来定义my-packages变量， 后面需要什么包的话都加在里面统一管理。 12345678910111213141516(defvar my-packages '(better-defaults ;; Set up some better Emacs defaults material-theme ;; Theme monokai-theme ;; Current Theme company ;; Auto complete web-mode ;; .html js2-mode ;; .js elpy ;; python ));; Scans the list in my-packages;; If the package listed is not already installed, install it(mapc #'(lambda (package) (unless (package-installed-p package) (package-install package))) my-packages) UI配置更改UI使得界面更加清楚美观。 设定编码1234567;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; setup coding system;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++(prefer-coding-system 'utf-8)(setenv &quot;LANG&quot; &quot;en_US.UTF-8&quot;)(setenv &quot;LC_ALL&quot; &quot;en_US.UTF-8&quot;)(setenv &quot;LC_CTYPE&quot; &quot;en_US.UTF-8&quot;) 去掉工具栏、菜单、滚动条， 以及minibuffer的滚动条。可以把指针改成竖线，但我习惯方块。12345678;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; Basic Settings;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; (setq-default cursor-type 'bar)(tool-bar-mode -1)(menu-bar-mode -1)(scroll-bar-mode -1)(set-window-scroll-bars (minibuffer-window) nil nil) 打开时最大化，并取消欢迎界面及scratch上的信息。123(setq inhibit-splash-screen 1 initial-scratch-message nil initial-frame-alist `((fullscreen . maximized)))","link":"/blog/2020/01/29/%E6%90%AD%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/"},{"title":"颜色搭配","text":"写文章的时候经常画图，需要考虑配色方案。好的配色需要区分度够高，尤其是对于接近的曲线。颜色同样能传达信息。比如对于下面的颜色已经固化为品牌的象征了。 #81D8D0 虽然最优解可以通过在光谱上均匀取点来得到，但是取得的颜色不标准的话也会不好看。比较方便的做法就是利用已有结果。 这里总结一下我比较满意的配色，留待日后使用。 MTR因为MTR的通常颜色搭配就是以线路交叉考量的，所以比较适合用于画图。选择的颜色比较标准。 主题色标题红 #AE213B 作为对比色出现的蓝色 #11254A 线路颜色荃湾线 #FF0000 观塘线 #1A9431 港岛线 #0860A8 南港岛线 #B5BD00 将军澳线 #6B208B 东涌线 #FE7F1D 迪士尼线 #F550A6 机场快线 #1C7670 东铁线 #5EB6E4 西铁线 #A40084 马鞍山线 #9A3B26 Nintendo Switch不同于索尼，老任的产品还是比较注重颜色搭配的。特别是switch的joy-con，在配色上做大文章。同时由于产品推陈出新，这部分有望获得更新。 标准系列电光红 (Neon Red) #FF5145 电光蓝 (Neon Blue) #00BBDF 电光紫 (Neon Purple) #8B26A6 电光橙 (Neon Orange) #F8B62E 电光黄 (Neon Yellow) #BAD600 灰色 #808080 喷射战士电光绿 (Neon Green) #19D719 电光粉 (Neon Pink) #F02D7D Pokemon皮卡丘黄 #FFDC00 伊布棕 #C88C32 将结果运用到gnuplot中12345678910set linetype 1 lc rgb &quot;#FF0000&quot; lw 2set linetype 2 lc rgb &quot;#1A9431&quot; lw 2set linetype 3 lc rgb &quot;#0860A8&quot; lw 2set linetype 4 lc rgb &quot;#6B208B&quot; lw 2set linetype 5 lc rgb &quot;#5EB6E4&quot; lw 2set linetype 6 lc rgb &quot;#A40084&quot; lw 2set linetype 7 lc rgb &quot;#B5BD00&quot; lw 2set linetype 8 lc rgb &quot;#FE7F1D&quot; lw 2set linetype 9 lc rgb &quot;#1C7670&quot; lw 2set linetype 10 lc rgb &quot;#F550A6&quot; lw 2","link":"/blog/2019/12/09/%E9%A2%9C%E8%89%B2%E6%90%AD%E9%85%8D/"},{"title":"我的游戏回忆录——写在30岁","text":"记忆是可以捏造的，本文中或许存在False Memory。 红白机时代说到人生的第一台游戏机，那自然是打着学习机名号的小霸王了。每次通电的那声“小霸王其乐无穷啊”，配合CRT电视上闪烁的大红色Logo，是专属于80、90后的回忆。抛开对FC的设计抄袭与配套的64 in 1盗版卡带不谈，确实圆了小时候的游戏梦。卡带的黄色塑料外壳做工很差，不耐几次拔插就分崩离析，露出青绿色的芯片。 小霸王官方卡带发行年份：1994 / 开发（？）商：小霸王 / 初体验：不详 / 完成度：不详 作为“学习机”，小霸王自然是有“官方”学习卡带的。如果没记错的话，当年应该就是视频里的《小霸王中英文电脑学习卡V3.0》。其中比较有印象的是按键击落掉下来的字母（帮助熟悉键盘）、完全看不懂的五笔和注音、以及有马里奥、碧姬、路易等出来观望（版权警告）打字的消息板，写着写着还要去蘸墨水。比较出名的中国象棋则是没怎么碰过。找素材的时候发现好像还支持Basic编程，这么说来确实有一点印象，但当年只觉得是一堆乱码，和消息板没什么区别。小时候能拿到游戏卡的场合并不多，借着这张卡“游戏”也是颇有印象。 document.getElementById(\"video1\").style.height=document.getElementById(\"video1\").scrollWidth*0.64+\"px\"; 64 in 1作为经典的盗版卡，现在知道里面其实有很多重复的游戏，但是当年并没有因此失望，毕竟任天堂FC上的游戏一个个拿出来都是精品。如今在Switch Online上能重温大部分。这边就回复一下非常有印象的一小部分吧。 超级玛丽发行年份：1983 / 开发商：任天堂 / 初体验：不详 / 完成度：1周目通关 40多年的热度，无需多言。以当年来说，对1-1所有物品的位置滚瓜烂熟，1-2的加命蘑菇吃法、跳关水管也是基本十有八九成功。但是基于后面难度陡增，能见到火龙关（城堡）的次数是少之又少。加上当年信息闭塞，甚至有在火龙关超时丢命的经历。不过印象里是有通关过，见到2周目的黑夜的。也因为这个游戏养成了许多“老一辈”的游戏习惯，比如跳跃的时候身体会朝跳的方向倾斜。值得一提的是，当年也许由于盗版卡带，1-2有概率变成水下关，直通城堡。一直以为是某种方式触发的秘籍。 长大以后，得知了宫本茂为了压缩卡带的各种巧思，草是不同颜色的云、板栗通过对称来走路等等，实在佩服。另一方面，作为邪道速通的鼻祖游戏，记录也一再被刷新。时至今日，人类速通记录已经被刷新到4分54秒631，与TAS的4分54秒032仅有毫秒级的差异。甚至连盲打记录（小时候的梦想）都被刷到了5分出头。如果只有一部游戏能被记入史册，那么非它莫属了。虽然之后玩过各种各样的马里奥，但是回到初代，比冰面还滑的地板，非线性加速的起跑，极少的补命机会，一次丢两层状态，即使是放在现在的标准，通关难度依旧高得离谱。也怪不得当年光是这个就能玩很久了。 document.getElementById(\"video2\").style.height=document.getElementById(\"video2\").scrollWidth*0.64+\"px\"; 坦克大战发行年份：1985 / 开发商：南梦宫 / 初体验：不详 / 完成度：通关（于GBC） 4种敌人：小车、快车、尖嘴、铁皮，5种地形：砖、铁、水、冰、草，6种道具：加命、升级（x3）、炸场、时停、护盾、保家，简单的胜败条件，却通过地图设计，创造出了50关之多。尤其是开放地图编辑器，更是非常有趣。长大再玩会算提前量了，基本所有图都能堵出生点，反倒没那种战场厮杀的感觉了。 听说双人游玩中A到队友可以硬控N秒，不知真假，或者又是盗版卡带的原因。 猫抓老鼠发行年份：1983 / 开发商：南梦宫 / 初体验：不详 / 完成度：不详 这游戏其实叫Mappy，是那只警察老鼠的名字。不过游戏里再怎么看都是正义猫猫逮捕小偷老鼠吧。弹簧无敌，开门杀敌，彩色门声波攻击，天花板可以走，基本是能记得的所有东西了。 马戏团发行年份：1986 / 开发商：科乐美 / 初体验：不详 / 完成度：不详 这竟然是我玩的第一个科乐美游戏。跳火圈、跳猴子、滚球印象都很深刻。最近好像还出了一个搞笑版，人抬着狮子过火圈。 魂斗罗三目童子魔界村摩托车","link":"/blog/2024/05/23/game/"}],"tags":[{"name":"工具","slug":"工具","link":"/blog/tags/%E5%B7%A5%E5%85%B7/"},{"name":"efficiency","slug":"efficiency","link":"/blog/tags/efficiency/"},{"name":"Formatting","slug":"Formatting","link":"/blog/tags/Formatting/"},{"name":"Color","slug":"Color","link":"/blog/tags/Color/"},{"name":"生活","slug":"生活","link":"/blog/tags/%E7%94%9F%E6%B4%BB/"}],"categories":[{"name":"工具","slug":"工具","link":"/blog/categories/%E5%B7%A5%E5%85%B7/"},{"name":"生活","slug":"生活","link":"/blog/categories/%E7%94%9F%E6%B4%BB/"},{"name":"Blog","slug":"工具/Blog","link":"/blog/categories/%E5%B7%A5%E5%85%B7/Blog/"},{"name":"游戏","slug":"生活/游戏","link":"/blog/categories/%E7%94%9F%E6%B4%BB/%E6%B8%B8%E6%88%8F/"}],"pages":[]}