{"posts":[{"title":"颜色搭配","text":"个人对于丰富的色彩比较执着。本文稍微总结一下比较喜欢的色彩，以供画图等需求。 MTR路线地铁路线经常有交叉的情况，因此也许比较适合用来画图。 荃湾线 #FF0000 观塘线 #1A9431 港岛线 #0860A8 南港岛线 #B5BD00 将军澳线 #6B208B 东涌线 #FE7F1D 迪士尼线 #F550A6 机场快线 #1C7670 东铁线 #53B7E8 屯马线 #9A3B26 Nintendo Switch(JoyCon)[https://en.wikipedia.org/wiki/Joy-Con]的色彩适合用于非标准的红黄蓝。 淡雅粉 #F8B1BF 电光粉 #FF3278 电光红 #FF3C28 红 #E10F00 电光橙 #FAA005 淡雅黄 #E3E790 电光黄 #E6FF00 淡雅绿 #C8EEC9 电光绿 #1EDC00 电光蓝 #0AB9E6 蓝 #4655F5 淡雅紫 #DDC1EA 电光紫 #B400E6 灰 #828282","link":"/blog/2019/12/09/color/"},{"title":"如何用Hexo搭建个人Blog","text":"Hexo是一个非常好用的博客框架。提供将Markdown渲染成Html博客的功能，并兼具丰富的主题。本文简单整理部署Hexo博客流程，以供参考。 使用Github Pages新建一个以&lt;username&gt;.github.io为名的repository，public和private都可。 之后，在Settings中找到Github Pages选项： 打开对应开关并选择主题即可。 注意：空的Repo不存在master branch，无法开启Github Pages，至少需要加入一个文件（如README.md）。 &lt;username&gt;.github.io 已被占用如果默认的链接已经存在个人主页了，可以另起一个任意名称的Repo（这里以test为例）。 此时Pages则会自动被放到&lt;username&gt;.github.io/test/域名下。 选择主题后，可以很快捷地生成一个pages页面。 Remarks 可以在test &gt; environment中查看编译情况。确定最新的commit已经编译完成后，若浏览器没有刷新，建议用Incognito window查看。 &lt;username&gt;.github.io的页面只能编译master branch，其他页面也可编译master下的/docs目录。但是多branch是不支持的。推荐Enforce HTTPS。 使用Hexo安装Git Bash从官网下载Git Bash。 12$ git --versiongit version 2.45.1.windows.1 顺便设置Git 123$ git config --global user.name &lt;YourName&gt;$ git config --global user.email &lt;YourEmail&gt;$ git config --global user.password &lt;YourPassword&gt; 安装Node.js从官网下载Node.js。 12345$ node -vv20.13.1$ npm -v10.5.2 安装Hexo12$ npm install -g hexo-cli$ hexo -v 初始化工作目录注意，目录必须为空，否则会报错。 1234$ mkdir blog$ cd blog$ hexo init$ npm install 目录结构如下 123456789.├── _config.yml // 全局设置├── package.json // npm依赖包├── public // 部署的网页├── scaffolds // 新建模板├── source // 编译public的源文件│ ├── _drafts│ └── _posts└── themes 预览网页可以执行以下指令 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 作用分别是清除缓存（clean）、由md生成html文件（generate），以及部署到本地4000端口（server）。在浏览器中键入localhost:4000以预览网页。 至此，本地Hexo的部署基本完成。按Ctrl+C以可以关闭部署。 Remark： 如果4000端口被占用，部署时用hexo s -p 5000指定空闲的端口。 如果只修改md文件，只执行hexo g重新生成Html即可。 修改主题本次使用主题为Icarus。具体按照文档安装即可。 12$ npm install hexo-theme-icarus$ hexo config theme icarus 该主题的配置文件主要在./_config.yml与./_config.icarus.yml中。 _config.yml >folded1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465title: &lt;Title&gt; # 显示在标签栏subtitle: &lt;SubTitle&gt; # 暂不清楚在哪里显示description: ''keywords: nullauthor: &lt;Author&gt; # 文章作者及底部版权language: zh-CN # 语言timezone: Hongkong # 时区url: &lt;URL&gt; # 链接permalink: ':year/:month/:day/:title/'permalink_defaults: nullpretty_urls: trailing_index: true trailing_html: truesource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: ':lang'skip_render: nullnew_post_name: ':title.md'default_layout: posttitlecase: falseexternal_link: enable: true field: site exclude: ''filename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truesyntax_highlighter: highlight.jshighlight: line_number: true auto_detect: false tab_replace: '' wrap: true hljs: falseprismjs: preprocess: true line_number: true tab_replace: ''index_generator: path: '' per_page: 10 order_by: '-date'default_category: uncategorizedcategory_map: nulltag_map: nullmeta_generator: truedate_format: YYYY-MM-DDtime_format: HH:mm:ssupdated_option: mtimeper_page: 10pagination_dir: pageinclude: nullexclude: nullignore: nulltheme: icarus # 主题自动配置deploy: type: git repository: &lt;URL&gt; # Git Pages 链接 branch: master _config.icarus.yml >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182...# Path or URL to the website's logologo: /img/&lt;LogoFile&gt;.png...# Article related configurationsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-dark # Show copy code button clipboard: true # Default folding status of the code blocks. Can be &quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; fold: unfolded # Whether to show estimated article reading time readtime: true # Whether to show updated time. For &quot;auto&quot;, shows article update time only when page.updated is set and it is different from page.date update_time: true # Article licensing block licenses: Creative Commons: icon: fab fa-creative-commons url: https://creativecommons.org/ Attribution: icon: fab fa-creative-commons-by url: https://creativecommons.org/licenses/by/4.0/ Noncommercial: icon: fab fa-creative-commons-nc url: https://creativecommons.org/licenses/by-nc/4.0/...# Sidebar configurations.# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # Left sidebar configurations left: # Whether the sidebar sticks to the top when page scrolls sticky: false # Right sidebar configurations right: # Whether the sidebar sticks to the top when page scrolls sticky: false# Sidebar widget configurations# http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: # Profile widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # Author name author: &lt;Name&gt; # Author title author_title: &lt;Title&gt; # Author's current location location: &lt;Location&gt; # URL or path to the avatar image avatar: &lt;Icon&gt; # Whether show the rounded avatar image avatar_rounded: false # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: &lt;URL&gt; Facebook: icon: fab fa-facebook url: &lt;URL&gt; Linkedin: icon: fa-brands fa-linkedin url: &lt;URL&gt; ORCID: icon: fa-brands fa-orcid url: &lt;URL&gt; # RSS: # icon: fas fa-rss # url: /... 部署到Github上首先确认安装npm install hexo-deployer-git，之后修改./_config.yml中 1234deploy: type: git repository: https://github.com/&lt;user&gt;/&lt;repo&gt; branch: master 最后执行 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 可以在github网页上看到效果。 备份源文件建议将md源文件与网页分开部署，例如使用不同的分支或不同的repo，否则源文件可能丢失。 1234567$ cd blog$ git init$ git add source$ git add _config.*$ git commit -m &quot;initial commit&quot;$ git remote add origin https://&lt;YourName&gt;@github.com/&lt;YourName&gt;/&lt;Repo&gt;$ git push -u origin master 撰写文章基本命令是hexo new [post/page/draft] &quot;&lt;title&gt;&quot;，在config中默认了default_layout: post，因此也可以hexo new &quot;&lt;title&gt;&quot;来新建一篇文章。 执行后，会在./source/_posts目录中新建一个&lt;title&gt;文件夹与&lt;title&gt;.md文件。默认的格式来源于./scaffolds/post.md。文件头一般是 12345678910---title: date: toc: truetags: - TAGcategories: - [1ST, 2ND]relative_link: true--- 插入图片要依照相对路径引用对应目录的图片比较复杂，需要在文章头开启relative_link，并通过如下方式。 12345...setting...relative_link: true---...text...{% asset_img img_name &quot;NAME&quot; %} 插入Bilibili播放器官方分享连接是 1&lt;iframe src=&quot;//player.bilibili.com/player.html?isOutside=true&amp;aid=AID&amp;bvid=BVID&amp;cid=CID&amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt; 但是不太好用。可以先在md文件中用JavaScript定义如下函数 putBilibili >folded1234567891011121314151617181920&lt;script type=&quot;text/javascript&quot;&gt; function putBilibili(aid, pid) { const player = new URL('https://www.bilibili.com/blackboard/html5mobileplayer.html'); player.searchParams.append('aid', aid); player.searchParams.append('p', pid || 1); player.searchParams.append('danmaku', 0); var iframe = document.createElement('iframe'); iframe.setAttribute('src', player.toString()); iframe.setAttribute('scrolling', &quot;no&quot;); iframe.setAttribute('border', &quot;0&quot;); iframe.setAttribute('frameborder', &quot;no&quot;); iframe.setAttribute('framespacing', &quot;0&quot;); iframe.setAttribute('allowfullscreen', &quot;true&quot;); iframe.setAttribute('width', &quot;100%&quot;); iframe.setAttribute('onload',&quot;javascript:(function(o){o.style.height=o.scrollWidth*0.64+'px';}(this));&quot;); document.write(iframe.outerHTML); }&lt;/script&gt; 然后在文中可以通过以下命令插入 1&lt;script&gt;putBilibili(aid, pid)&lt;/script&gt; 具体区别如下 外链播放器新版本外链播放器player.bilibili.com/player.html点任何地方都会跳转到B站，此外，代码中有如下片段 1const mobileUrl = '//www.bilibili.com/blackboard/webplayer/mbplayer.html'; 在手机上会回溯到mbplayer，导致各种参数失效。换成了旧版播放器https://www.bilibili.com/blackboard/html5mobileplayer.html，比较简单实用。 配置项只通过番号aid和P号pid来定位视频，P号从1P开始。关闭了弹幕，其他参数一致。 宽高调整为了在手机与电脑上都有合适的长宽，将宽设置成100%，并通过onload函数动态调整高为0.64宽。因为包含脚本，需要以document.write来实现。","link":"/blog/2019/06/01/hexo/"},{"title":"搭建工作环境","text":"本文是对新电脑安装软件的简单汇总。以Windows为主。 基础环境 Chrome Adobe Reader Git Bash Sublime Text 7-Zip Windows相关Cygwin和Msys2都比较常用，暂时没能体会出区别。轻量开发不需要。此外还有Windows Subsystem for Linux (WSL)，但经常容易出现同一台机器上两个版本的软件这种问题，比较麻烦。Windows Terminal可以集成多种环境，但是没有什么特别的需求。 以Msys2为例，安装完后执行pacman -Syu来更新包，可能需要执行两次。此外，要对系统变量做如下设置： 增加用户变量MSYS2_PATH_TYPE，值为inherit，否则不会继承系统的PATH。 将msys64\\usr\\bin和msys54\\usr\\local\\bin加入系统PATH。 编程环境C++ / Java 开发 IntelliJ IDEA IntelliJ Clion PythonWindows+Python是一个众所周知的灾难。方便起见还是直接使用Anaconda吧！分别对应了Python2和3的版本。安装时记得勾选加入PATH中。首先执行 1conda update conda 进行更新，接下来在Anaconda的目录中分别将python.exe复制到同目录下python2.exe及python3.exe方便调用不同版本。具体python指向哪一个是根据PATH中的先后顺序，可以用where python来查看。同理复制Scripts文件夹中的pip.exe及pip-script.py。调用python会给WARNING说没有激活conda环境，方法是先conda init &lt;powershell&gt;更改为当前shell，重启shell后用conda info --envs找到地址，接着conda activate base就可以了。 或许需要用set-ExecutionPolicy RemoteSigned来提供权限。 推荐安装black来进行Code Formatting。需要用Python3来安装 1python3 -m pip install black 但是装完后black命令也可以用在Python2文件上。 Emacs最好的编辑器（操作系统）Emacs，目前Windows最新版26.3。下载并解压后，根据官方的提示执行bin\\runemacs.exe即可。运行bin\\emacs.exe也可以，只是会多出一个黑框。 在命令行下直接运行bin\\emacs.exe不会多一个命令行窗口。同时支持-nw选项。 将&lt;folder&gt;\\emacs\\bin文件夹加入PATH中，方便直接调用。 在PowerShell或Windows Terminal中查看PATH需要用$env:PATH 首先要找到Emacs加载配置的地址。用echo ~来确认。通常在c:/Users/&lt;usrname&gt;/AppData/Roaming/中。 1cd ~/.emacs.d/ 直接引用可以直接用别人现成的配置。已有的配置推荐这几个。 Spacemacs一个开源项目，重点是Emacs与Vim的兼容。首次启动会询问用户更倾向于哪种编辑器方式，以及需要轻量或重量的编辑器。安装方式直接 1git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d 注意备份好自己原先的配置文件。首次安装比较缓慢，后面的效率还是不错的。此外，作者还推出了一个21天Emacs学习指南，解释的还是比较清楚的。后半部分和Vim关系比较大。 高手配置Steve Purcell的配置在Github上Star最多(5.3k Stars)，应该是业界翘楚了。 1git clone https://github.com/purcell/emacs.d.git ~/.emacs.d 但是在我的电脑上每次打开要加载18秒，太慢了。。。 自己配置白盒用起来还是更舒服，至少要知道每一块的作用是什么。比较推荐的Reference有：Emacs-China 社区, Emacs-TW 社区, 以及一篇Python社区的文章。 首先建立.emacs.d/init.el文件。这是emacs读取配置的入口。规范起见，所有的.el文件开头结尾应该遵循如下规范： 1234567;;; package --- summary;;; .emacs.d/init.el;;; Commentary:;;; Code:(provide `init);;; init.el ends here 同时，为了能在配置时快速找到这个文件，暂时将它绑定到&lt;F2&gt;。 12345;; Fast open init file, bind to &lt;F2&gt;(defun open-init-file() (interactive) (find-file &quot;~/.emacs.d/init.el&quot;))(global-set-key (kbd &quot;&lt;f2&gt;&quot;) 'open-init-file) 文件管理为了有效管理不同文件，建立一个lisp文件夹以管理不同的el文件。同时在init.el中加入 1(add-to-list 'load-path &quot;~/.emacs.d/lisp/&quot;) 这样后面就可以用(require)命令来直接引用(provide)的文件了。此外可以通过org来管理，步骤略。 依赖项最新版本已经集成packages.el，直接引用即可。安装并配置use-package，方便其他包的安装。使用auto-compile确保编译包，并使用最新版本。 12345678910111213141516171819202122232425262728293031;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; MELPA package support;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++(require 'package)(setq package-archives '((&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;) (&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) (&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) (&quot;elpy&quot; . &quot;http://jorgenschaefer.github.io/packages/&quot;) (&quot;gnu&quot; . &quot;http://elpa.gnu.org/packages/&quot;)) ;; Avoid duplicate loading package-enable-at-startup nil);; Initializes the package infrastructure(package-initialize);; install use-package(when (not (package-installed-p 'use-package)) (package-refresh-contents) (package-install 'use-package));; Configure use-package(eval-when-compile (require 'use-package))(setq use-package-verbose t)(setq use-package-always-ensure t);; always compile packages(use-package auto-compile :config (auto-compile-on-load-mode));; use latest version(setq load-prefer-newer t) 重新启动Emacs并等待初始化。接下来定义my-packages变量， 后面需要什么包的话都加在里面统一管理。 12345678910111213141516(defvar my-packages '(better-defaults ;; Set up some better Emacs defaults material-theme ;; Theme monokai-theme ;; Current Theme company ;; Auto complete web-mode ;; .html js2-mode ;; .js elpy ;; python ));; Scans the list in my-packages;; If the package listed is not already installed, install it(mapc #'(lambda (package) (unless (package-installed-p package) (package-install package))) my-packages) UI配置更改UI使得界面更加清楚美观。 设定编码1234567;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; setup coding system;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++(prefer-coding-system 'utf-8)(setenv &quot;LANG&quot; &quot;en_US.UTF-8&quot;)(setenv &quot;LC_ALL&quot; &quot;en_US.UTF-8&quot;)(setenv &quot;LC_CTYPE&quot; &quot;en_US.UTF-8&quot;) 去掉工具栏、菜单、滚动条， 以及minibuffer的滚动条。可以把指针改成竖线，但我习惯方块。12345678;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; Basic Settings;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;; (setq-default cursor-type 'bar)(tool-bar-mode -1)(menu-bar-mode -1)(scroll-bar-mode -1)(set-window-scroll-bars (minibuffer-window) nil nil) 打开时最大化，并取消欢迎界面及scratch上的信息。123(setq inhibit-splash-screen 1 initial-scratch-message nil initial-frame-alist `((fullscreen . maximized))) Tmux个人感觉(Tmux)[https://github.com/tmux/tmux/wiki]是一个简装Emacs，但是提供了多窗口和独立于ssh session的功能，非常实用。","link":"/blog/2020/01/29/env/"},{"title":"日语单词整理——ああ","text":"ああーあお. あ、ああ语气词、代词 あい 词语 例句 含义 あいにく あいにく雨が降り出した 不凑巧、偏巧 あいつ 那小子 藍色 靛青 曖昧 曖昧な態度 模棱两可 挨拶 挨拶する 寒暄、致辞 愛 爱，感情愛情、愛人、愛憎、愛国、愛犬、愛好、愛称、愛し合う、愛敬熱愛、博愛、偏愛、恋愛 喜欢（用）愛用、愛読、愛顧 可爱、亲切 词语 例句 含义 愛嬌・愛敬 愛嬌がある 可爱之处 愛嬌をふりまく 殷勤 愛くるしい 愛くるしい顔 可爱的 愛想 愛想がいい、愛想のない返事 对人的态度、亲切 なんのお愛想もできませんでした 招待 お愛想 买单 愛着 母校に愛着を感じる 留恋 相 互相、对方相手、相棒、相方、相席・合席 相性相性 郑重，很 词语 例句 含义 相容れない 相容れない関係・個性 不相容、互不两立 相次ぐ・相次いで 事故が相次ぐ 接连不断 相槌 相槌を打つ 随声附和 相変わらず 相変わらず元気です 没变 間（あいだ）ビルの間、社員の間、間を取る 词语 例句 含义 間柄 親しい間柄 关系 合 词语 例句 含义 合図 合図を送る 信号 合間 仕事の合間 (事情中断的)空闲时间 あえ敢えてあえて危険を冒す 亜鉛（あえん） Zn 喘ぐ（自・１） 喘气喘ぎながら山に登る 引申：苦于不況に喘ぐ 和える（他・２） 搅拌（料理）味噌で和える、酢で和える あう合う（自・１） 合而为一、一致川が合う、意見が合う、話が合う 合适、相配好みに合う 互相（复合）話し合う、助け合う 他動詞・使役形：合わせる 会う・逢う・遭う・遇う（自・１） 见面、遇见先生に会う、友達と会う 遭到（遭う）火事に遭う、ひどい目に遭う（倒霉） あお青・蒼 浅蓝色·苍白海の青、青い、青色、青空、青白い・蒼白い顔 绿色、新的、初步的青葉、青梅、青信号、青森、青写真 青二才：小毛孩 葵（あおい）扇ぐ・煽ぐ（他・１）扇子を扇ぐ、扇いで火をおこす 仰ぐ（他・１） 仰仰いで空を見る、高層ビルを仰ぎ見る 天を仰ぐ：仰天长叹毒を仰ぐ：服毒自杀 引申：推举为、依赖、请求批准会長に仰ぐ、彼を首長と仰ぐ、原料を外国に仰ぐ、助力を仰ぐ 互相（复合）仰向く、仰向ける 呷る（他・１） 一饮而尽 ア 词语 原文 含义 アイデア・アイディア idea アイドル idol アイス ice アイロン iron 熨斗 アウト out","link":"/blog/2024/08/08/jp-aa/"}],"tags":[{"name":"工具","slug":"工具","link":"/blog/tags/%E5%B7%A5%E5%85%B7/"},{"name":"日语","slug":"日语","link":"/blog/tags/%E6%97%A5%E8%AF%AD/"}],"categories":[{"name":"工具","slug":"工具","link":"/blog/categories/%E5%B7%A5%E5%85%B7/"},{"name":"环境","slug":"工具/环境","link":"/blog/categories/%E5%B7%A5%E5%85%B7/%E7%8E%AF%E5%A2%83/"},{"name":"画图","slug":"工具/画图","link":"/blog/categories/%E5%B7%A5%E5%85%B7/%E7%94%BB%E5%9B%BE/"},{"name":"单词","slug":"单词","link":"/blog/categories/%E5%8D%95%E8%AF%8D/"},{"name":"Blog","slug":"工具/Blog","link":"/blog/categories/%E5%B7%A5%E5%85%B7/Blog/"},{"name":"あ","slug":"单词/あ","link":"/blog/categories/%E5%8D%95%E8%AF%8D/%E3%81%82/"}],"pages":[]}